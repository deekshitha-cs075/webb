You need a unified approach that combines both editable input fields and rich text formatting while also allowing PDF/Excel generation. Hereâ€™s how you can achieve this in JSP:

1. Use contenteditable for Rich Text Editing

Instead of input fields, use div elements with contenteditable="true". This will allow users to format text dynamically while keeping the flexibility of text input.

<div contenteditable="true" id="assumption">Enter Assumption</div>
<div contenteditable="true" id="caution">Enter Caution</div>
<div contenteditable="true" id="description">Enter Description</div>

You can style them using CSS:

[contenteditable] {
    border: 1px solid #ccc;
    padding: 10px;
    min-height: 30px;
    font-family: Arial, sans-serif;
    font-size: 14px;
}

2. Add Formatting Options (Bold, Italics, Font Size, etc.)

Use JavaScript to format selected text within the contenteditable divs.

<button onclick="document.execCommand('bold')">Bold</button>
<button onclick="document.execCommand('italic')">Italic</button>
<button onclick="document.execCommand('underline')">Underline</button>
<button onclick="changeFontSize(5)">Increase Font Size</button>

<script>
    function changeFontSize(size) {
        document.execCommand("fontSize", false, size);
    }
</script>

3. Store Data in Hidden Inputs for Form Submission

When submitting the form, transfer the rich-text content into hidden input fields to send data to the server.

<form action="saveData.jsp" method="post" onsubmit="prepareData()">
    <input type="hidden" name="assumptionData" id="assumptionInput">
    <input type="hidden" name="cautionData" id="cautionInput">
    <input type="hidden" name="descriptionData" id="descriptionInput">
    <button type="submit">Submit</button>
</form>

<script>
    function prepareData() {
        document.getElementById("assumptionInput").value = document.getElementById("assumption").innerHTML;
        document.getElementById("cautionInput").value = document.getElementById("caution").innerHTML;
        document.getElementById("descriptionInput").value = document.getElementById("description").innerHTML;
    }
</script>

4. Generate PDF and Excel

Use libraries like jsPDF for PDF generation and SheetJS (xlsx) for Excel.

For PDF (Using jsPDF)

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<button onclick="generatePDF()">Download PDF</button>

<script>
    function generatePDF() {
        const { jsPDF } = window.jspdf;
        let doc = new jsPDF();
        
        let assumption = document.getElementById("assumption").innerText;
        let caution = document.getElementById("caution").innerText;
        let description = document.getElementById("description").innerText;

        doc.text("Assumption:", 10, 10);
        doc.text(assumption, 10, 20);
        doc.text("Caution:", 10, 40);
        doc.text(caution, 10, 50);
        doc.text("Description:", 10, 70);
        doc.text(description, 10, 80);

        doc.save("form_data.pdf");
    }
</script>

For Excel (Using SheetJS - XLSX)

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
<button onclick="generateExcel()">Download Excel</button>

<script>
    function generateExcel() {
        let data = [
            ["Field", "Content"],
            ["Assumption", document.getElementById("assumption").innerText],
            ["Caution", document.getElementById("caution").innerText],
            ["Description", document.getElementById("description").innerText]
        ];

        let ws = XLSX.utils.aoa_to_sheet(data);
        let wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

        XLSX.writeFile(wb, "form_data.xlsx");
    }
</script>

Final Thoughts

Now your form:

1. Supports rich text formatting.


2. Allows users to enter and edit data dynamically.


3. Can be submitted as a form (stored in hidden fields).


4. Exports data to PDF and Excel.



Would you like me to help integrate this into your existing JSP backend?

